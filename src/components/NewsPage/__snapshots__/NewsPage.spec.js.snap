// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`News page has error toMatchSnapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NewsPage
    data={Array []}
    error="some error"
    getNews={[Function]}
    isPending={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1>
          News page
        </h1>,
        <ErrorMsg
          error="some error"
        />,
        false,
        <React.Fragment>
          <div>
            Total news: 
            <strong>
              0
            </strong>
          </div>
          <div
            className="news-list"
          />
        </React.Fragment>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "News page",
        },
        "ref": null,
        "rendered": "News page",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "error": "some error",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <div>
              Total news: 
              <strong>
                0
              </strong>
            </div>,
            <div
              className="news-list"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Total news: ",
                <strong>
                  0
                </strong>,
              ],
            },
            "ref": null,
            "rendered": Array [
              "Total news: ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": 0,
                },
                "ref": null,
                "rendered": 0,
                "type": "strong",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [],
              "className": "news-list",
            },
            "ref": null,
            "rendered": Array [],
            "type": "div",
          },
        ],
        "type": Symbol(react.fragment),
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1>
            News page
          </h1>,
          <ErrorMsg
            error="some error"
          />,
          false,
          <React.Fragment>
            <div>
              Total news: 
              <strong>
                0
              </strong>
            </div>
            <div
              className="news-list"
            />
          </React.Fragment>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "News page",
          },
          "ref": null,
          "rendered": "News page",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "error": "some error",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <div>
                Total news: 
                <strong>
                  0
                </strong>
              </div>,
              <div
                className="news-list"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Total news: ",
                  <strong>
                    0
                  </strong>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "Total news: ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": 0,
                  },
                  "ref": null,
                  "rendered": 0,
                  "type": "strong",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [],
                "className": "news-list",
              },
              "ref": null,
              "rendered": Array [],
              "type": "div",
            },
          ],
          "type": Symbol(react.fragment),
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
